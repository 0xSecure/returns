- case: applicative_inheritance_correct
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.typeclasses.applicative import Applicative
    from returns.hkt import Kind, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(Kind['MyClass', V], Applicative[V]):
        def __init__(self, value: V) -> None:
            self.value = value

        def apply(
            self,
            container: Kind['MyClass', Callable[[V], N]],
        ) -> 'MyClass[N]':
            return MyClass(dekind(container).value(self.value))

        @classmethod
        def from_value(cls, inner_value: N) -> MyClass[N]:
            return MyClass(inner_value)

    reveal_type(MyClass('1').apply(MyClass.from_value(int)))  # N: Revealed type is 'main.MyClass[builtins.int*]'


- case: applicative_inheritance_missing
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.typeclasses.applicative import Applicative
    from returns.hkt import Kind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(Kind['MyClass', V], Applicative[V]):
        def __init__(self, value: V) -> None:
            self.value = value

    reveal_type(MyClass('1'))
  out: |
    main:12: error: Cannot instantiate abstract class 'MyClass' with abstract attributes 'apply' and 'from_value'
    main:12: note: Revealed type is 'main.MyClass[builtins.str*]'


- case: applicative_inheritance_wrong
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.typeclasses.applicative import Applicative
    from returns.hkt import Kind, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(Kind['MyClass', V], Applicative[V]):
        def __init__(self, value: V) -> None:
            self.value = value

        def apply(
            self,
            container: 'MyClass[Callable[[V], N]]',
        ) -> 'MyClass[N]':
            ...

        @classmethod
        def from_value(cls, inner_value: V) -> None:
            ...
  out: |
    main:12: error: Argument 1 of "apply" is incompatible with supertype "Applicative"; supertype defines the argument type as "Kind[MyClass[V], Callable[[V], _NewValueType]]"
    main:12: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:12: note: This violates the Liskov substitution principle
    main:19: error: Argument 1 of "from_value" is incompatible with supertype "Applicative"; supertype defines the argument type as "_NewValueType"
    main:19: error: Return type "None" of "from_value" incompatible with return type "Kind[MyClass[V], _NewValueType]" in supertype "Applicative"
    main:19: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:19: note: This violates the Liskov substitution principle
