- case: bind_context_wrong_env
  disable_cache: true
  main: |
    from returns.pointfree import bind_context3
    from returns.context import RequiresContext, RequiresContextResult

    def test(arg: float) -> RequiresContext[str, int]:
        ...

    x: RequiresContextResult[float, bool, str]
    bind_context3(test)(x)
  out: |
    main:8: error: Argument 1 has incompatible type "RequiresContextResult[float, bool, str]"; expected "KindN[RequiresContextResult[Any, Any, Any], float, bool, int]"


- case: bind_context_wrong_type
  disable_cache: true
  main: |
    from returns.pointfree import bind_context3
    from returns.context import RequiresContext

    def test(arg: float) -> RequiresContext[str, int]:
        ...

    x: RequiresContext[float, int]
    bind_context3(test)(x)
  out: |
    main:8: error: Value of type variable "_Reader3Kind" of function cannot be "RequiresContext[Any, Any]"


- case: bind_context_alias
  disable_cache: true
  main: |
    from returns.pointfree import bind_context3
    from returns.context import RequiresContext, RequiresContextResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextResult[float, Exception, str]
    reveal_type(bind_context3(test)(x))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult*[builtins.int, builtins.Exception*, builtins.str]'


- case: bind_context_and_flow
  disable_cache: true
  main: |
    from returns.context import RequiresContext, RequiresContextResult
    from returns.pointfree import bind_context
    from returns.pipeline import flow

    def test(arg: int) -> RequiresContext[float, str]:
        ...

    def second(arg: float) -> RequiresContext[bool, str]:
        ...

    r: RequiresContextResult[int, Exception, str]
    reveal_type(flow(r, bind_context(test), bind_context(second)))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult*[builtins.bool, builtins.Exception*, builtins.str]'


- case: bind_context_requires_context_result
  disable_cache: true
  main: |
    from returns.pointfree import bind_context
    from returns.context import RequiresContext, RequiresContextResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextResult[float, Exception, str]
    reveal_type(bind_context(test)(x))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult*[builtins.int, builtins.Exception*, builtins.str]'


- case: bind_context_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_context
    from returns.context import RequiresContext, RequiresContextIOResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextIOResult[float, Exception, str]
    reveal_type(bind_context(test)(x))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult*[builtins.int, builtins.Exception*, builtins.str]'


- case: bind_context_requires_context_future_result
  disable_cache: true
  main: |
    from returns.pointfree import bind_context
    from returns.context import RequiresContext, RequiresContextFutureResult

    def test(arg: float) -> RequiresContext[int, str]:
        ...

    x: RequiresContextFutureResult[float, Exception, str]
    reveal_type(bind_context(test)(x))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult*[builtins.int, builtins.Exception*, builtins.str]'


- case: bind_context_custom_type
  disable_cache: true
  main: |
    from typing import Callable, TypeVar, ClassVar, Union, Any
    from returns.interfaces.specific.reader import ReaderBased3
    from returns.primitives.hkt import SupportsKind3
    from returns.context import Reader, NoDeps
    from returns.pointfree import bind_context

    _EnvType = TypeVar('_EnvType', contravariant=True)
    _ValueType = TypeVar('_ValueType', covariant=True)
    _NewValueType = TypeVar('_NewValueType')
    _ErrorType = TypeVar('_ErrorType', covariant=True)

    class MyClass(
        SupportsKind3['MyClass', _ValueType, _ErrorType, _EnvType],
        ReaderBased3[_ValueType, _ErrorType, _EnvType],
    ):
        empty: ClassVar[NoDeps] = object()

        def __call__(self, deps: _EnvType) -> Union[_ValueType, _ErrorType]:
            ...

        def bind_context(
            self,
            function: Callable[
                [_ValueType],
                Reader[_NewValueType, _EnvType],
            ],
        ) -> MyClass[_NewValueType, _ErrorType, _EnvType]:
            ...

        @classmethod
        def from_context(
            self, inner_value: Reader[_ValueType, _EnvType],
        ) -> MyClass[_ValueType, Any, _EnvType]:
            ...

    def test(a: int) -> Reader[float, str]:
        ...

    x: MyClass[int, Exception, str]
    reveal_type(bind_context(test)(x))  # N: Revealed type is 'main.MyClass*[builtins.float, builtins.Exception*, builtins.str]'
