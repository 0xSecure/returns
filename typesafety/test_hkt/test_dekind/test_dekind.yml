- case: dekind_correct_fully_known
  disable_cache: true
  main: |
    from returns.io import IO
    from returns.hkt import Kind, dekind

    container: Kind[IO, int]
    reveal_type(dekind(container))  # N: Revealed type is 'returns.io.IO[builtins.int]'


- case: dekind_correct_two_type_args
  disable_cache: true
  main: |
    from returns.io import IOResult
    from returns.hkt import Kind, dekind

    container: Kind[IOResult, int, str]
    reveal_type(dekind(container))  # N: Revealed type is 'returns.io.IOResult[builtins.int, builtins.str]'


- case: dekind_correct_typevar
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.hkt import Kind, dekind

    _ValueType = TypeVar('_ValueType')
    _NewValueType = TypeVar('_NewValueType')

    class IO(Kind['IO', _ValueType]):
        def apply(
            self,
            container: Kind[
                'IO[_ValueType]',
                Callable[[_ValueType], _NewValueType],
            ],
        ):
            reveal_type(dekind(container))  # N: Revealed type is 'main.IO[def (_ValueType`1) -> _NewValueType`-1]'


- case: dekind_wrong_non_instance
  disable_cache: true
  main: |
    from typing import TypeVar
    from returns.hkt import Kind, dekind

    T = TypeVar('T')

    def some(arg: T):
        container: Kind[T, int, str]
        reveal_type(dekind(container))
  out: |
    main:8: error: dekind should be used with Instance as the first type argument
    main:8: note: Revealed type is 'Any'
