- case: requires_context_future_result_map
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    reveal_type(x.map(bool))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_apply
  disable_cache: true
  main: |
    from typing import Callable
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]
    y: RequiresContextFutureResult[str, Callable[[int], bool], float]

    reveal_type(x.apply(y))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_bind
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> RequiresContextFutureResult[str, bool, float]:
        ...

    reveal_type(x.bind(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_rescue
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: float) -> RequiresContextFutureResult[str, int, bool]:
        ...

    reveal_type(x.rescue(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.int, builtins.bool*]'


- case: requires_context_future_result_value_or
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    first: RequiresContextFutureResult[object, int, bool]

    reveal_type(first.value_or('a'))  # N: Revealed type is 'def (builtins.object) -> typing.Awaitable[returns.io.IO[Union[builtins.int, builtins.str*]]]'


- case: requires_context_future_result_unwrap
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    first: RequiresContextFutureResult[object, int, str]

    reveal_type(first.unwrap())  # N: Revealed type is 'def (builtins.object*) -> typing.Awaitable[returns.io.IO[builtins.int*]]'


- case: requires_context_future_result_failure
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    first: RequiresContextFutureResult[object, int, str]

    reveal_type(first.failure())  # N: Revealed type is 'def (builtins.object*) -> typing.Awaitable[returns.io.IO[builtins.str*]]'
