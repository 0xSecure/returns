- case: monad_inheritance_correct
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.typeclasses.monad import Monad
    from returns.hkt import Kind, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(Kind['MyClass', V], Monad[V]):
        def __init__(self, value: V) -> None:
            self.value = value

        def bind(
            self,
            function: Callable[[V], Kind['MyClass', N]],
        ) -> 'MyClass[N]':
            return dekind(function(self.value))

    def test(arg: str) -> MyClass[int]:
        return MyClass(int(arg))

    reveal_type(MyClass('1').bind(test))  # N: Revealed type is 'main.MyClass[builtins.int*]'


- case: monad_inheritance_missing
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.typeclasses.monad import Monad
    from returns.hkt import Kind, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(Kind['MyClass', V], Monad[V]):
        def __init__(self, value: V) -> None:
            self.value = value

    reveal_type(MyClass('1'))
  out: |
    main:12: error: Cannot instantiate abstract class 'MyClass' with abstract attribute 'bind'
    main:12: note: Revealed type is 'main.MyClass[builtins.str*]'


- case: monad_inheritance_wrong
  disable_cache: true
  main: |
    from typing import Callable, TypeVar
    from returns.typeclasses.monad import Monad
    from returns.hkt import Kind, dekind

    V = TypeVar('V')
    N = TypeVar('N')

    class MyClass(Kind['MyClass', V], Monad[V]):
        def __init__(self, value: V) -> None:
            self.value = value

        def bind(
            self,
            function: Callable[[V], Kind['MyClass', V]],
        ) -> 'MyClass[V]':
            return dekind(function(self.value))
  out: |
    main:12: error: Argument 1 of "bind" is incompatible with supertype "Monad"; supertype defines the argument type as "Callable[[V], Kind[MyClass[V], _NewValueType]]"
    main:12: error: Return type "MyClass[V]" of "bind" incompatible with return type "Kind[MyClass[V], _NewValueType]" in supertype "Monad"
    main:12: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
    main:12: note: This violates the Liskov substitution principle
