- case: apply_by_variance
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.maybe import Maybe

    class A: ...
    class B(A): ...
    class C(B): ...

    x: Maybe[B]

    def test(a: A) -> C:
        ...

    reveal_type(apply_by(x)(Maybe.from_value(test)))  # N: Revealed type is 'returns.maybe.Maybe[main.C*]'


- case: apply_by_and_flow
  disable_cache: true
  main: |
    from returns.result import Result
    from returns.curry import curry
    from returns.pointfree import apply_by
    from returns.pipeline import flow

    @curry
    def long(arg: int, other: int) -> str:
        ...

    x: Result[int, str]
    reveal_type(
        flow(
            Result.from_value(long),
            apply_by(Result.from_value(1)),
        )
    )
    reveal_type(
        flow(
            Result.from_value(long),
            apply_by(Result.from_value(1)),
            apply_by(x),
        )
    )
  out: |
    main:12: note: Revealed type is 'returns.result.Result[def (other: builtins.int) -> builtins.str, Any]'
    main:18: note: Revealed type is 'returns.result.Result[builtins.str*, Any]'


- case: apply_by_io
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.io import IO

    def test(arg: float) -> int:
        ...

    reveal_type(apply_by(IO(1.5))(IO(test)))  # N: Revealed type is 'returns.io.IO[builtins.int*]'


- case: apply_by_maybe
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.maybe import Maybe

    def test(arg: float) -> int:
        ...

    reveal_type(apply_by(Maybe.from_value(1.5))(Maybe.from_value(test)))  # N: Revealed type is 'returns.maybe.Maybe[builtins.int*]'


- case: apply_by_result
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.result import Result

    def test(arg: float) -> int:
        ...

    x: Result[float, str]
    reveal_type(apply_by(x)(Result.from_value(test)))  # N: Revealed type is 'returns.result.Result[builtins.int*, builtins.str]'


- case: apply_by_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.io import IOResult

    def test(arg: float) -> int:
        ...

    x: IOResult[float, str]
    reveal_type(apply_by(x)(IOResult.from_value(test)))  # N: Revealed type is 'returns.io.IOResult[builtins.int*, builtins.str]'


- case: apply_by_requires_context
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.context import RequiresContext

    def test(arg: float) -> int:
        ...

    x: RequiresContext[str, float]
    reveal_type(apply_by(x)(RequiresContext.from_value(test)))  # N: Revealed type is 'returns.context.requires_context.RequiresContext[builtins.str, builtins.int*]'


- case: apply_by_requires_context_result
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.context import RequiresContextResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextResult[bool, float, str]
    reveal_type(apply_by(x)(RequiresContextResult.from_value(test)))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool, builtins.int*, builtins.str]'


- case: apply_by_requires_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.context import RequiresContextIOResult

    def test(arg: float) -> int:
        ...

    x: RequiresContextIOResult[bool, float, str]
    reveal_type(apply_by(x)(RequiresContextIOResult.from_value(test)))  # N: Revealed type is 'returns.context.requires_context_ioresult.RequiresContextIOResult[builtins.bool, builtins.int*, builtins.str]'


- case: apply_by_future
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.future import Future

    def test(arg: float) -> int:
        ...

    x: Future[float]
    reveal_type(apply_by(x)(Future.from_value(test)))  # N: Revealed type is 'returns.future.Future[builtins.int*]'


- case: apply_by_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import apply_by
    from returns.future import FutureResult

    def test(arg: float) -> int:
        ...

    x: FutureResult[float, str]
    reveal_type(apply_by(x)(FutureResult.from_value(test)))  # N: Revealed type is 'returns.future.FutureResult[builtins.int*, builtins.str]'
