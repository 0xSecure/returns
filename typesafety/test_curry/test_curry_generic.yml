- case: curry_wrong_generic
  disable_cache: true
  main: |
    from returns.curry import curry
    from typing import List, TypeVar

    T = TypeVar('T')

    def multiple(
        a: List[T],
        b: List[T],
    ) -> T:
        ...

    x: List[int]
    y: List[str]

    reveal_type(curry(multiple, x)(y))
  out: |
    main:15: error: Cannot infer type argument 1 of "multiple"
    main:15: note: Revealed type is 'Any'


- case: curry_single_generic
  disable_cache: true
  main: |
    from returns.curry import curry
    from typing import List, TypeVar

    T = TypeVar('T')

    def multiple(
        a: int,
        b: List[T],
        c: bool = False,
    ) -> T:
        ...

    x: List[int]

    reveal_type(curry(multiple))
    reveal_type(curry(multiple, 1))
    reveal_type(curry(multiple, 1)(x, True))
    reveal_type(curry(multiple, 1)(x))
    reveal_type(curry(multiple, 1)(x, c=True))
    reveal_type(curry(multiple, 2, x))
    reveal_type(curry(multiple, 2, x, True))
    reveal_type(curry(multiple, 2, x)())
  out: |
    main:15: note: Revealed type is 'def [T] (a: builtins.int, b: builtins.list[T`-1], c: builtins.bool =) -> T`-1'
    main:16: note: Revealed type is 'def [T] (b: builtins.list[T`-1], c: builtins.bool =) -> T`-1'
    main:17: note: Revealed type is 'builtins.int*'
    main:18: note: Revealed type is 'builtins.int*'
    main:19: note: Revealed type is 'builtins.int*'
    main:20: note: Revealed type is 'def (c: builtins.bool =) -> builtins.int*'
    main:21: note: Revealed type is 'def () -> builtins.int*'
    main:22: note: Revealed type is 'builtins.int*'

- case: curry_double_generic
  disable_cache: true
  main: |
    from returns.curry import curry
    from typing import List, TypeVar, Union

    T = TypeVar('T')
    X = TypeVar('X')

    def multiple(
        a: int,
        *,
        b: List[T],
        c: List[X],
    ) -> Union[T, X]:
        ...

    x: List[int]
    y: List[str]

    reveal_type(curry(multiple))
    reveal_type(curry(multiple, 1))
    reveal_type(curry(multiple, 1, b=x))
    reveal_type(curry(multiple, 1, c=x))
    reveal_type(curry(multiple, 1, b=y))
    reveal_type(curry(multiple, 1, c=y))
    reveal_type(curry(multiple, 1, c=y, b=x))

    reveal_type(curry(multiple, 1, b=x)(c=y))
    reveal_type(curry(multiple, 1, c=x)(b=y))
  out: |
    main:18: note: Revealed type is 'def [X, T] (a: builtins.int, *, b: builtins.list[T`-1], c: builtins.list[X`-2]) -> Union[T`-1, X`-2]'
    main:19: note: Revealed type is 'def [X, T] (*, b: builtins.list[T`-1], c: builtins.list[X`-2]) -> Union[T`-1, X`-2]'
    main:20: note: Revealed type is 'def [X] (*, c: builtins.list[X`-2]) -> Union[builtins.int*, X`-2]'
    main:21: note: Revealed type is 'def [T] (*, b: builtins.list[T`-1]) -> Union[T`-1, builtins.int*]'
    main:22: note: Revealed type is 'def [X] (*, c: builtins.list[X`-2]) -> Union[builtins.str*, X`-2]'
    main:23: note: Revealed type is 'def [T] (*, b: builtins.list[T`-1]) -> Union[T`-1, builtins.str*]'
    main:24: note: Revealed type is 'def () -> Union[builtins.int*, builtins.str*]'
    main:26: note: Revealed type is 'Union[builtins.int, builtins.str*]'
    main:27: note: Revealed type is 'Union[builtins.str*, builtins.int]'
