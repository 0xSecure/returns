- case: bind_future_and_flow
  disable_cache: true
  main: |
    from returns.functions import identity
    from returns.pointfree import bind_future, bind
    from returns.future import Future, FutureResult
    from returns.pipeline import flow

    def test(arg: int) -> Future[float]:
        ...

    def second(arg: float) -> FutureResult[bool, str]:
        ...

    r: FutureResult[int, str]
    reveal_type(flow(r, bind_future(test), bind(second), identity))  # N: Revealed type is 'returns.future.FutureResult*[builtins.bool*, builtins.str*]'


- case: bind_future_futureresult
  disable_cache: true
  main: |
    from returns.pointfree import bind_future
    from returns.future import Future, FutureResult

    def test(arg: float) -> Future[int]:
        ...

    x: FutureResult[float, str]
    reveal_type(bind_future(test)(x))  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.str*]'


- case: bind_future_requires_context_future_result
  disable_cache: true
  main: |
    from returns.pointfree import bind_future
    from returns.future import Future
    from returns.context import ReaderFutureResult

    def test(arg: float) -> Future[int]:
        ...

    x: ReaderFutureResult[bool, float, Exception]
    reveal_type(bind_future(test)(x))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool*, builtins.int, builtins.Exception*]'
