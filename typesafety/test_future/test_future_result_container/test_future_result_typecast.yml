- case: future_result_correct_cast
  disable_cache: true
  main: |
    from returns.future import FutureResult, FutureResultE

    first: FutureResult[int, Exception]
    second: FutureResultE[int]

    test1: FutureResultE[int] = first
    test2: FutureResult[int, Exception] = second

    reveal_type(first)  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.Exception]'
    reveal_type(second)  # N: Revealed type is 'returns.future.FutureResult[builtins.int, builtins.Exception]'


- case: future_result_covariant_cast
  disable_cache: true
  main: |
    from returns.future import FutureResult

    first: FutureResult[TypeError, ValueError]  # we cast both values
    second: FutureResult[Exception, Exception] = first
    reveal_type(second)  # N: Revealed type is 'returns.future.FutureResult[builtins.Exception, builtins.Exception]'


- case: future_result_from_typecast
  disable_cache: true
  main: |
    from returns.future import Future, FutureResult
    from returns.result import Result

    first: Result[int, str]

    reveal_type(FutureResult.from_typecast(Future.from_value(first)))  # N: Revealed type is 'returns.future.FutureResult[builtins.int*, builtins.str*]'

