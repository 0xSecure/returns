- case: requires_context_future_result_map
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    reveal_type(x.map(bool))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_apply
  disable_cache: true
  main: |
    from typing import Callable
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]
    y: RequiresContextFutureResult[str, Callable[[int], bool], float]

    reveal_type(x.apply(y))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_bind
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> RequiresContextFutureResult[str, bool, float]:
        ...

    reveal_type(x.bind(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_bind_awaitable
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    async def bind_awaitable(arg: int) -> float:
        ...

    first: RequiresContextFutureResult[bool, int, str]

    reveal_type(first.bind_awaitable(bind_awaitable))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float*, builtins.str]'


- case: requires_context_future_result_bind_async
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    async def bind_async(arg: int) -> RequiresContextFutureResult[bool, float, str]:
        ...

    first: RequiresContextFutureResult[bool, int, str]

    reveal_type(first.bind_async(bind_async))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.bool, builtins.float*, builtins.str]'


- case: requires_context_future_result_bind_result
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.result import Result

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> Result[bool, float]:
        ...

    reveal_type(x.bind_result(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_futureresult_bind_ioresult
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.io import IOResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> IOResult[bool, float]:
        ...

    reveal_type(x.bind_ioresult(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_bind_io
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.io import IO

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> IO[bool]:
        ...

    reveal_type(x.bind_io(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_futureresult_bind_future_result
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult
    from returns.future import FutureResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> FutureResult[bool, float]:
        ...

    reveal_type(x.bind_future_result(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_bind_context
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult, RequiresContext

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> RequiresContext[str, bool]:
        ...

    reveal_type(x.bind_context(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_bind_context_result
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult, RequiresContextResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> RequiresContextResult[str, bool, float]:
        ...

    reveal_type(x.bind_context_result(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_bind_context_ioresult
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult, RequiresContextIOResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: int) -> RequiresContextIOResult[str, bool, float]:
        ...

    reveal_type(x.bind_context_ioresult(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_rescue
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: float) -> RequiresContextFutureResult[str, int, bool]:
        ...

    reveal_type(x.rescue(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.int, builtins.bool*]'


- case: requires_context_future_result_fix
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: float) -> bool:
        ...

    reveal_type(x.fix(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.bool*, builtins.float]'


- case: requires_context_future_result_alt
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[str, int, float]

    def test(param: float) -> bool:
        ...

    reveal_type(x.alt(test))  # N: Revealed type is 'returns.context.requires_context_future_result.RequiresContextFutureResult[builtins.str, builtins.int, builtins.bool*]'


- case: requires_context_future_result_value_or
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    first: RequiresContextFutureResult[object, int, bool]

    reveal_type(first.value_or('a'))  # N: Revealed type is 'def (builtins.object) -> typing.Awaitable[returns.io.IO[Union[builtins.int, builtins.str*]]]'


- case: requires_context_future_result_unwrap
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    first: RequiresContextFutureResult[object, int, str]

    reveal_type(first.unwrap())  # N: Revealed type is 'def (builtins.object*) -> typing.Awaitable[returns.io.IO[builtins.int*]]'


- case: requires_context_future_result_failure
  disable_cache: true
  main: |
    from returns.context import RequiresContextFutureResult

    first: RequiresContextFutureResult[object, int, str]

    reveal_type(first.failure())  # N: Revealed type is 'def (builtins.object*) -> typing.Awaitable[returns.io.IO[builtins.str*]]'
