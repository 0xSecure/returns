- case: requires_context_result_call
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, Exception, str]

    reveal_type(x('a'))  # N: Revealed type is 'returns.result.Result[builtins.int*, builtins.Exception*]'


- case: requires_context_result_bind
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    def test(param: int) -> RequiresContextResult[bool, float, str]:
        ...

    reveal_type(x.bind(test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.float, builtins.str]'


- case: requires_context_result_bind_result
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult
    from returns.result import Result

    x: RequiresContextResult[int, float, str]

    def test(param: int) -> Result[bool, float]:
        ...

    reveal_type(x.bind_result(test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.float, builtins.str]'


- case: requires_context_result_bind_context
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult, RequiresContext

    x: RequiresContextResult[int, float, str]

    def test(param: int) -> RequiresContext[bool, str]:
        ...

    reveal_type(x.bind_context(test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.float, builtins.str]'


- case: requires_context_result_map
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    reveal_type(x.map(bool))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.float, builtins.str]'


- case: requires_context_result_apply
  disable_cache: true
  main: |
    from typing import Callable
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]
    y: RequiresContextResult[Callable[[int], bool], float, str]

    reveal_type(x.apply(y))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.float, builtins.str]'


- case: requires_context_result_rescue
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    def test(param: float) -> RequiresContextResult[int, bool, str]:
        ...

    reveal_type(x.rescue(test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int, builtins.bool*, builtins.str]'


- case: requires_context_result_fix
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    def test(param: float) -> bool:
        ...

    reveal_type(x.fix(test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.bool*, builtins.float, builtins.str]'


- case: requires_context_result_alt
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    def test(param: float) -> bool:
        ...

    reveal_type(x.alt(test))  # N: Revealed type is 'returns.context.requires_context_result.RequiresContextResult[builtins.int, builtins.bool*, builtins.str]'


- case: requires_context_result_value_or
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    reveal_type(x.value_or(None)('a'))  # N: Revealed type is 'Union[builtins.int, None]'


- case: requires_context_result_unwrap
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    reveal_type(x.unwrap()('a'))  # N: Revealed type is 'builtins.int*'


- case: requires_context_result_failure
  disable_cache: true
  main: |
    from returns.context import RequiresContextResult

    x: RequiresContextResult[int, float, str]

    reveal_type(x.failure()('a'))  # N: Revealed type is 'builtins.float*'
