- case: value_or_callback_protocol
  disable_cache: true
  main: |
    from typing import Callable, TypeVar, Union
    from returns.pointfree import value_or
    from returns.maybe import Maybe

    _ValueType = TypeVar('_ValueType', contravariant=True)
    _NewValueType = TypeVar('_NewValueType', covariant=True)

    def ensure_callback(
        f: Callable[[Maybe[_ValueType]], Union[_ValueType, int]],
        c: Maybe[_ValueType],
    ) -> Union[_ValueType, int]:
        return f(c)

    reveal_type(ensure_callback(value_or(1), Maybe.from_value('a')))  # N: Revealed type is 'Union[builtins.str, builtins.int]'


- case: value_or_and_flow
  disable_cache: true
  main: |
    from returns.result import Result
    from returns.functions import identity
    from returns.pointfree import value_or
    from returns.pipeline import flow

    r: Result[int, str]
    reveal_type(flow(r, value_or(None), identity))  # N: Revealed type is 'Union[builtins.int*, None]'


- case: value_or_maybe
  disable_cache: true
  main: |
    from returns.pointfree import value_or
    from returns.maybe import Maybe

    x: Maybe[int]
    reveal_type(value_or('a')(x))  # N: Revealed type is 'Union[builtins.int*, builtins.str]'


- case: value_or_result
  disable_cache: true
  main: |
    from returns.pointfree import value_or
    from returns.result import Result

    x: Result[int, bool]
    reveal_type(value_or('a')(x))  # N: Revealed type is 'Union[builtins.int*, builtins.str]'


- case: value_or_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import value_or
    from returns.io import IOResult

    x: IOResult[int, bool]
    reveal_type(value_or('a')(x))  # N: Revealed type is 'returns.io.IO[Union[builtins.int*, builtins.str]]'


- case: value_or_context_result
  disable_cache: true
  main: |
    from returns.pointfree import value_or
    from returns.context import RequiresContextResult

    x: RequiresContextResult[object, int, bool]
    reveal_type(value_or('a')(x))  # N: Revealed type is 'def (builtins.object*) -> Union[builtins.int*, builtins.str]'


- case: value_or_context_ioresult
  disable_cache: true
  main: |
    from returns.pointfree import value_or
    from returns.context import RequiresContextIOResult

    x: RequiresContextIOResult[object, int, bool]
    reveal_type(value_or('a')(x))  # N: Revealed type is 'def (builtins.object*) -> returns.io.IO[Union[builtins.int*, builtins.str]]'


- case: value_or_context_future_result
  disable_cache: true
  main: |
    from returns.pointfree import value_or
    from returns.context import RequiresContextFutureResult

    x: RequiresContextFutureResult[object, int, bool]
    reveal_type(value_or('a')(x))  # N: Revealed type is 'def (builtins.object*) -> typing.Awaitable[returns.io.IO[Union[builtins.int*, builtins.str]]]'
